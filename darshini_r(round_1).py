# -*- coding: utf-8 -*-
"""DARSHINI R(ROUND 1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S7ORrfU-mfaOmgHTmObfbJIAKG5tEoSk
"""

! git clone https://github.com/matterport/Mask_RCNN.git

!pip install numpy
!pip install scipy
!pip install Pillow
!pip install cython
!pip install matplotlib
!pip install scikit-image
!pip install tensorflow

!pip install keras
!pip install opencv-python
!pip install h5py
!pip install imgaug
!pip install IPython

import os
import sys
import random
import math
import numpy as np
import skimage.io
import matplotlib
import matplotlib.pyplot as plt

ROOT_DIR = os.path.abspath("/content/Mask_RCNN")
print(ROOT_DIR)

!pip install tensorflow==1.13.1
!pip install keras==2.0.8
!pip install h5py==2.10.0

import warnings
warnings.filterwarnings("ignore")
print(sys.path.append(ROOT_DIR) )
from mrcnn import utils
import mrcnn.model as modellib
from mrcnn import visualize
sys.path.append(os.path.join(ROOT_DIR, "samples/coco/"))

# Commented out IPython magic to ensure Python compatibility.
import coco

# %matplotlib inline 

# Directory to save logs and trained model
MODEL_DIR = os.path.join(ROOT_DIR, "logs")

# Local path to trained weights file
COCO_MODEL_PATH = os.path.join(ROOT_DIR, "mask_rcnn_coco.h5")
# Download COCO trained weights from Releases if needed
if not os.path.exists(COCO_MODEL_PATH):
    utils.download_trained_weights(COCO_MODEL_PATH)

# Directory of images to run detection on
IMAGE_DIR = os.path.join(ROOT_DIR, "images")

"""# **Preparing the model configuration parameters** """

class InferenceConfig(coco.CocoConfig):
    # Set batch size to 1 since we'll be running inference on
    # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1

config = InferenceConfig()
config.display()

"""# **Mask R-CNN model building**"""

model = modellib.MaskRCNN(mode="inference", model_dir=MODEL_DIR, config=config)

"""# **Loading weights**"""

# Load weights trained on MS-COCO
model.load_weights(COCO_MODEL_PATH, by_name=True)

class_names = ['BG', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',
               'bus', 'train', 'truck', 'boat', 'traffic light',
               'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird',
               'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear','panda',
               'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie',
               'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
               'kite', 'baseball bat', 'baseball glove', 'skateboard',
               'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',
               'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
               'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
               'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed',
               'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote',
               'keyboard', 'cell phone', 'microwave', 'oven', 'toaster',
               'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors',
               'teddy bear', 'hair drier', 'toothbrush']

"""# **Reads an image,Detecting objects and visualizing the results**"""

#Reading an input image
file_names = next(os.walk(IMAGE_DIR))[2]
image = skimage.io.imread(os.path.join(IMAGE_DIR, random.choice(file_names)))

# object detection
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], 
                            class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/images/1045023827_4ec3e8ba5c_z.jpg')

# original image
plt.figure(figsize=(12,10))
skimage.io.imshow(image)

results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/aeroplane.jpg')

plt.figure(figsize=(12,10))
skimage.io.imshow(image)

results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

mask = r['masks']
mask = mask.astype(int)
mask.shape

for i in range(mask.shape[2]):
    temp = skimage.io.imread('/content/Mask_RCNN/aeroplane.jpg')
    for j in range(temp.shape[2]):
        temp[:,:,j] = temp[:,:,j] * mask[:,:,i]
    plt.figure(figsize=(8,8))
    plt.imshow(temp)

image = skimage.io.imread('/content/Mask_RCNN/TestImages/car.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/diningtable.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/dog.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/kite.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/mouse.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/toilet.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/truck.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/tv.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])

image = skimage.io.imread('/content/Mask_RCNN/TestImages/bus.jpg')

plt.figure(figsize=(12,10))
results = model.detect([image], verbose=1)

# Visualize results
r = results[0]
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])



















